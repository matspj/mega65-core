; HDMI I2C setup / test program

; Include C64 BASIC program load header

	 .word $0801
	 .org $0801

	.alias bitstream_length bitstream_end-bitstream_start

	 .scope
	 .word _next, 10                       ; Next line and current line number
	 .byte $97, "2,0:", $9e, " 2014", $AA, "65",0      ; POKE 2,0 : SYS 2014+65
_next:	 .word 0

iter1:	 .byte 0

	 .checkpc 2079
	 .advance 2079

programentrypoint:

	; disable interrupts so we can single-step more easily
	sei
	
	; Enable C65GS io
	lda #$47
	sta $d02f
	lda #$53
	sta $D02f

	; Full CPU speed
	lda #65
	sta 0

	; clear screen, lower case
	lda #$93
	jsr $ffd2
	lda #$0e
	jsr $ffd2

	; Set pointer at $00A5 (some free Zero-Page/Pointer memory bytes) to $FFDF000 for VFPGA register access
	lda #<$F000
	sta $a5
	lda #>$F000
	sta $a6
	lda #<$0FFD
	sta $a7 
	lda #>$0FFD
	sta $a8

	; Display VFPGA parameters
	jsr print_string_inline
	.byte "                 vfpga WIDTH: ",0
	ldz #$00
	nop
	lda ($a5),z
	tax
	lda #$00
	ldz #$00
	jsr $bdcd

	jsr print_string_inline
	.byte 13,"                vfpga HEIGHT: ",0
	ldz #$01
	nop
	lda ($a5),z
	tax
	lda #$00
	ldz #$00
	jsr $bdcd

	jsr print_string_inline
	.byte 13,"      lOGIC WIRE CARDINALITY: ",0
	ldz #$02
	nop
	lda ($a5),z
	tax
	lda #$00
	ldz #$00
	jsr $bdcd

	jsr print_string_inline
	.byte 13,"                lutS PER clb: ",0
	ldz #$03
	nop
	lda ($a5),z
	tax
	lda #$00
	ldz #$00
	jsr $bdcd

	jsr print_string_inline
	.byte 13,"              iNPUTS PER clb: ",0
	ldz #$04
	nop
	lda ($a5),z
	tax
	lda #$00
	ldz #$00
	jsr $bdcd

	jsr print_string_inline
	.byte 13,"              iNPUTS PER lut: ",0
	ldz #$05
	nop
	lda ($a5),z
	tax
	lda #$00
	ldz #$00
	jsr $bdcd

	jsr print_string_inline
	.byte 13,"           nUMBER OF io PINS: ",0
	ldz #$06
	nop
	lda ($a5),z
	tax
	lda #$00
	ldz #$00
	jsr $bdcd

	jsr print_string_inline
	.byte 13,"     cONFIG BITSTREAM LENGTH: ",0
	ldz #$07
	nop
	lda ($a5),z
	tax
	inz
	nop
	lda ($a5),z
	ldz #$00
	jsr $bdcd

	jsr print_string_inline
	.byte 13,"   sNAPSHOT BITSTREAM LENGTH: ",0
	ldz #$09
	nop
	lda ($a5),z
	tax
	inz
	nop
	lda ($a5),z
	ldz #$00
	jsr $bdcd


	; Display length of embedded bitstream
	jsr print_string_inline
	.byte 13,13,5,"lENGTH OF SUPPLIED BITSTREAM: ",0
	lda #>bitstream_length
	ldx #<bitstream_length
	jsr $bdcd
	lda #$0d
	jsr $ffd2

	; Load the bitstream

	jsr load_bitstream

	jsr start_vfpga

done:
	; show clock count down
	ldz #$12
	nop
	lda ($a5),z
	sta $0400
	inz
	nop
	lda ($a5),z
	sta $0401
	inz
	nop
	lda ($a5),z
	sta $0402
	
	jsr show_vfpga_io
	jmp done

start_vfpga:

	; Clear VFPGA reset, enable app clock
	lda #$12
	ldz #$0b
	nop
	sta ($a5),z
	lda #$02
	nop
	sta ($a5),z

	; Set clock dividor to something non-zero, or clock won't go
	lda #<13
	ldz #$10
	nop
	sta ($a5),z
	lda #>13
	ldz #$11
	nop
	sta ($a5),z

	; Set a large number of remaining cycles for debugging, but NOT $FFFFFF or clock won't go
	lda #$FE
	ldz #$12
	nop
	sta ($a5),z
	lda #$FF
	ldz #$13
	nop
	sta ($a5),z
	ldz #$14
	nop
	sta ($a5),z

show_vfpga_io:

	; first VFPGA register we want to read, i.e., $FFDF000+$20
	ldz #$20
	; setup pointer to area on screen
	lda #<[$0400+13*40]
	sta $fd
	lda #>[$0400+13*40]
	sta $fd+1
@shownextreg:
	nop
	lda ($a5),z
	pha
	lsr
	lsr
	lsr
	lsr
	tay
	lda hexdigit,y
	ldy #$00
	sta ($fd),y
	pla
	and #$0f
	tay
	lda hexdigit,y
	ldy #$01
	sta ($fd),y

	; Add 3 to write address
	lda $fd
	clc
	adc #$03
	sta $fd
	lda $fe
	adc #$00
	sta $fe

	inz
	cpz #$27
	bne @noskip

	; advance to next line
	lda $fd
	clc
	adc #$13
	sta $fd
	lda $fe
	adc #$00
	sta $fe

	ldz #$30
	
@noskip:
	cpz #$37
	bne @shownextreg

	ldz #$00
	rts

hexdigit: .byte $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$01,$2,$3,$4,$5,$6


read_bitstream:
	; Work out how many bytes to go

	ldz #$07
	nop
	lda ($a5),z
	sta bytes_remaining+0
	inz
	nop
	lda ($a5),z
	sta bytes_remaining+1
	ldz #$00

	lda bytes_remaining
	sec
	sbc #$01
	sta bytes_remaining
	lda bytes_remaining+1
	sbc #$00
	sta bytes_remaining+1

	lda #$12
	sta $4000
	lda #$34
	sta $4001


	; place in memory to store it
	lda #<$4000
	sta $fd
	lda #>$4000
	sta $fe

	ldy #$00

@rbitstreamnextbyte:
	; Read byte of bitstream from memory

	; read it from $FFDF015
	ldz #$15
	nop
	lda ($a5),z

	; store in memory
	ldz #$00
	sta ($fd),z

	; update memory write pointer
	lda $fd
	clc
	adc #$01
	sta $fd
	lda $fe
	adc #$00
	sta $fe

	; decrement number of bytes remaining to extract
	dec bytes_remaining
	lda bytes_remaining
	cmp #$ff
	bne @rbitstreamnextbyte
	dec bytes_remaining+1
	lda bytes_remaining+1
	cmp #$ff
	bne @rbitstreamnextbyte

	rts

load_bitstream:
	; Work out how many bytes to go
	lda #<[bitstream_length-1]
	sta bytes_remaining+0
	lda #>[bitstream_length-1]
	sta bytes_remaining+1

	; Get pointer to read from
	lda #<bitstream_start
	sta $fd+0
	lda #>bitstream_start
	sta $fd+1


@bitstreamnextbyte:
	; Read byte of bitstream from memory
	ldz #$00
	lda ($fd),z

	; Write it to $FFDF015
	ldz #$15
	nop
	sta ($a5),z

	; Advance to next byte of bitstream
	lda $fd
	clc
	adc #$01
	sta $fd
	lda $fe
	adc #$00
	sta $fe

	dec bytes_remaining
	lda bytes_remaining
	cmp #$ff
	bne @bitstreamnextbyte
	dec bytes_remaining+1
	lda bytes_remaining+1
	cmp #$ff
	bne @bitstreamnextbyte

	rts

bytes_remaining:	.byte 0,0

print_string_inline:
	; Pull return address from stack,
	; add one, and it is the address of the string
	pla
	sta $fd
	pla
	sta $fe
@loop:
	ldy #$00
	lda ($fd),y
	beq @done
	jsr $ffd2
	inc $fd
	lda $fd
	bne @loop
	inc $fe
	jmp @loop
@done:
	lda $fe
	pha
	lda $fd
	pha
	rts
	

	.byte "BITSTREAM BEGINS<<<"
bitstream_start:
	.incbin "../../assets/vfpga-bitstream.bin"
bitstream_end:
	.byte ">>>BITSTREAM ENDS"

	.scend

	.outfile "vfpgatest.prg"
